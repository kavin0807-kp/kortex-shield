services:
  nginx:
    image: nginx:1.25
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/auth:/etc/nginx/auth:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - kortex-net
    restart: unless-stopped
    depends_on:
      - tomcat-app1
      - tomcat-app2
      - tomcat-app3
      - kortex-shield

  tomcat-app1:
    image: tomcat:9.0-jdk11-temurin
    container_name: tomcat-app1
    volumes:
      - ./wars/app1:/usr/local/tomcat/webapps/ROOT
    networks:
      - kortex-net
    restart: unless-stopped

  tomcat-app2:
    image: tomcat:9.0-jdk11-temurin
    container_name: tomcat-app2
    volumes:
      - ./wars/app2:/usr/local/tomcat/webapps/ROOT
    networks:
      - kortex-net
    restart: unless-stopped

  tomcat-app3:
    image: tomcat:9.0-jdk11-temurin
    container_name: tomcat-app3
    volumes:
      - ./wars/app3:/usr/local/tomcat/webapps/ROOT
    networks:
      - kortex-net
    restart: unless-stopped

  kortex-shield:
    build: ./inference
    container_name: kortex-shield
    volumes:
      - ./kortex_model:/app/kortex_model:ro
      - ./detections:/app/detections
    networks:
      - kortex-net
    restart: unless-stopped

  dashboard:
    build: ./dashboard
    container_name: dashboard
    ports:
      - "5001:5001"
    volumes:
      - ./detections:/detections:ro
    networks:
      - kortex-net
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - kortex-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.1
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - kortex-net
    restart: unless-stopped

networks:
  kortex-net:
    driver: bridge
